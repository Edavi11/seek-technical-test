name: Build and Deploy to AWS ECS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: customer-service-cluster
  ECS_SERVICE: customer-service
  ECS_TASK_DEFINITION: customer-service-task
  CONTAINER_NAME: customer-service
  DOCKER_IMAGE: edavila11/customer-service

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Run tests
      run: mvn test
      
    - name: Build with Maven
      run: mvn clean package -DskipTests

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Build with Maven
      run: mvn clean package -DskipTests
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
        --query taskDefinition > task-definition.json
        
    - name: Update task definition
      run: |
        # Update the image URI in the task definition
        sed -i 's|"image": ".*customer-service.*"|"image": "${{ env.DOCKER_IMAGE }}:latest"|g' task-definition.json
        
        # Remove fields that should not be included in the new task definition
        jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' task-definition.json > new-task-definition.json
        
    - name: Register new task definition
      run: |
        aws ecs register-task-definition --cli-input-json file://new-task-definition.json
        
    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --force-new-deployment
          
    - name: Wait for service to stabilize
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }}
          
    - name: Get service URL
      id: service-url
      run: |
        # Get the ALB DNS name from the service
        ALB_DNS=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].loadBalancers[0].loadBalancerName' \
          --output text)
        
        if [ "$ALB_DNS" != "None" ]; then
          echo "url=http://$ALB_DNS" >> $GITHUB_OUTPUT
        else
          echo "url=Service URL not available" >> $GITHUB_OUTPUT
        fi
          
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful!"
          echo "🚀 Application deployed to: ${{ steps.service-url.outputs.url }}"
          echo "📊 Health check: ${{ steps.service-url.outputs.url }}/actuator/health"
          echo "ℹ️  App info: ${{ steps.service-url.outputs.url }}/actuator/custom-info"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi