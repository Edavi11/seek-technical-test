name: Deploy to AWS ECS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: customer-cluster
  ECS_SERVICE: customer-service
  ECS_TASK_DEFINITION: customer-task
  CONTAINER_NAME: customer-service

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn test
      
    - name: Build with Maven
      run: mvn clean package -DskipTests

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build with Maven
      run: mvn clean package -DskipTests
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build Docker image
      run: docker build -t customer-management-service .
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Push to Docker Hub
      run: |
        docker tag customer-management-service ${{ secrets.DOCKERHUB_USERNAME }}/customer-management-service:latest
        docker tag customer-management-service ${{ secrets.DOCKERHUB_USERNAME }}/customer-management-service:${{ github.sha }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/customer-management-service:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/customer-management-service:${{ github.sha }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} \
        --query taskDefinition > task-definition.json
        
    - name: Update task definition
      run: |
        # Update the image URI in the task definition
        sed -i 's|"image": ".*customer-management-service.*"|"image": "${{ secrets.DOCKERHUB_USERNAME }}/customer-management-service:${{ github.sha }}"|g' task-definition.json
        
        # Remove fields that should not be included in the new task definition
        jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' task-definition.json > new-task-definition.json
        
    - name: Register new task definition
      run: |
        aws ecs register-task-definition --cli-input-json file://new-task-definition.json
        
    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --force-new-deployment
          
    - name: Wait for service to stabilize
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }}
          
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Deployment successful!"
          echo "üöÄ Application deployed to: http://YOUR_ALB_DNS"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi 